/* style.css */

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  font-family: Arial, sans-serif;
}

body {
  background-color: #f4f4f4;
  color: #333;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px;
  transition: background-color 0.3s, color 0.3s;
}

header {
  text-align: center;
  margin-bottom: 30px;
}

h1 {
  font-size: 2rem;
  margin-bottom: 10px;
}

nav {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 10px;
}

nav button {
  padding: 10px 20px;
  border: none;
  background-color: #ddd;
  cursor: pointer;
  border-radius: 5px;
  transition: background-color 0.3s ease;
}

nav button.active,
nav button:hover {
  background-color: #007BFF;
  color: white;
}

main {
  width: 100%;
  max-width: 500px;
  background: white;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  transition: background 0.3s, color 0.3s;
}

section {
  display: none;
}

section.active {
  display: block;
}

section h2 {
  margin-bottom: 20px;
  font-size: 1.5rem;
  text-align: center;
}

#digital-clock,
#stopwatch-display,
#timer-display,
#pomodoro-display {
  font-size: 3rem;
  text-align: center;
  margin-bottom: 20px;
  font-weight: bold;
}

input[type="time"],
input[type="number"] {
  padding: 10px;
  margin: 5px;
  width: calc(50% - 12px);
  font-size: 1rem;
  border: 1px solid #ccc;
  border-radius: 5px;
}

button {
  padding: 10px 15px;
  margin: 5px;
  border: none;
  background-color: #007BFF;
  color: white;
  border-radius: 5px;
  cursor: pointer;
  transition: opacity 0.2s;
}

button:hover {
  opacity: 0.9;
}

#alarm-status,
#weather-info {
  text-align: center;
  margin-top: 15px;
  font-size: 1rem;
  font-style: italic;
}

/* Dark Mode (auto detect via prefers-color-scheme) */
@media (prefers-color-scheme: dark) {
  body {
    background-color: #1e1e1e;
    color: #f4f4f4;
  }

  main {
    background: #2b2b2b;
  }

  nav button {
    background-color: #444;
    color: #ddd;
  }

  nav button.active,
  nav button:hover {
    background-color: #2196F3;
    color: white;
  }

  input[type="time"],
  input[type="number"] {
    background: #3c3c3c;
    color: #fff;
    border: 1px solid #666;
  }

  button {
    background-color: #2196F3;
  }

  #alarm-status,
  #weather-info {
    color: #ccc;
  }
}

/* script.js */

// Tabs
const navButtons = document.querySelectorAll('nav button');
const sections = document.querySelectorAll('main section');

navButtons.forEach((button, index) => {
  button.addEventListener('click', () => {
    navButtons.forEach(btn => btn.classList.remove('active'));
    sections.forEach(sec => sec.classList.remove('active'));

    button.classList.add('active');
    sections[index].classList.add('active');
  });
});

// Digital Clock
function updateDigitalClock() {
  const now = new Date();
  const clock = document.getElementById('digital-clock');
  clock.textContent = now.toLocaleTimeString();
}
setInterval(updateDigitalClock, 1000);
updateDigitalClock();

// Alarm
let alarmTime = null;
const alarmAudio = new Audio('https://www.soundjay.com/button/beep-07.wav');

document.getElementById('set-alarm').addEventListener('click', () => {
  alarmTime = document.getElementById('alarm-time').value;
  document.getElementById('alarm-status').textContent = `Alarme definido para ${alarmTime}`;
});

setInterval(() => {
  const now = new Date();
  const currentTime = now.toTimeString().slice(0, 5);
  if (alarmTime === currentTime) {
    alarmAudio.play();
    document.getElementById('alarm-status').textContent = '⏰ Alarme disparado!';
    alarmTime = null;
  }
}, 1000);

// Stopwatch
let stopwatchInterval;
let stopwatchTime = 0;

function updateStopwatch() {
  const minutes = Math.floor(stopwatchTime / 60).toString().padStart(2, '0');
  const seconds = (stopwatchTime % 60).toString().padStart(2, '0');
  document.getElementById('stopwatch-display').textContent = `${minutes}:${seconds}`;
}

document.getElementById('start-stopwatch').addEventListener('click', () => {
  clearInterval(stopwatchInterval);
  stopwatchInterval = setInterval(() => {
    stopwatchTime++;
    updateStopwatch();
  }, 1000);
});

document.getElementById('stop-stopwatch').addEventListener('click', () => {
  clearInterval(stopwatchInterval);
});

document.getElementById('reset-stopwatch').addEventListener('click', () => {
  clearInterval(stopwatchInterval);
  stopwatchTime = 0;
  updateStopwatch();
});

// Timer
let timerInterval;

document.getElementById('start-timer').addEventListener('click', () => {
  let time = parseInt(document.getElementById('timer-minutes').value) * 60;
  clearInterval(timerInterval);
  timerInterval = setInterval(() => {
    if (time > 0) {
      time--;
      const minutes = Math.floor(time / 60).toString().padStart(2, '0');
      const seconds = (time % 60).toString().padStart(2, '0');
      document.getElementById('timer-display').textContent = `${minutes}:${seconds}`;
    } else {
      clearInterval(timerInterval);
      document.getElementById('timer-display').textContent = '⏰';
    }
  }, 1000);
});

// Pomodoro
let pomodoroInterval;
let pomodoroTime = 25 * 60;

function updatePomodoroDisplay() {
  const minutes = Math.floor(pomodoroTime / 60).toString().padStart(2, '0');
  const seconds = (pomodoroTime % 60).toString().padStart(2, '0');
  document.getElementById('pomodoro-display').textContent = `${minutes}:${seconds}`;
}

document.getElementById('start-pomodoro').addEventListener('click', () => {
  clearInterval(pomodoroInterval);
  pomodoroInterval = setInterval(() => {
    if (pomodoroTime > 0) {
      pomodoroTime--;
      updatePomodoroDisplay();
    } else {
      clearInterval(pomodoroInterval);
      document.getElementById('pomodoro-display').textContent = '☕ Tempo de pausa!';
    }
  }, 1000);
});

document.getElementById('reset-pomodoro').addEventListener('click', () => {
  clearInterval(pomodoroInterval);
  pomodoroTime = 25 * 60;
  updatePomodoroDisplay();
});

updatePomodoroDisplay();

// Weather
const apiKey = 'INSIRA_SUA_API_KEY_AQUI';

function fetchWeather() {
  if (!navigator.geolocation) {
    document.getElementById('weather-info').textContent = 'Geolocalização não suportada.';
    return;
  }

  navigator.geolocation.getCurrentPosition(pos => {
    const { latitude, longitude } = pos.coords;
    fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=metric&appid=${apiKey}&lang=pt_br`)
      .then(res => res.json())
      .then(data => {
        const { name, main, weather } = data;
        document.getElementById('weather-info').textContent = `${name}: ${main.temp}°C, ${weather[0].description}`;
      })
      .catch(() => {
        document.getElementById('weather-info').textContent = 'Erro ao buscar clima.';
      });
  });
}

fetchWeather();
