<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Seu Tempo, Suas Regras: O Relógio Digital Multifuncional Perfeito!</title>
    <style>
        body {
            font-family: 'Open Sans', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
            color: #333;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .container {
            display: flex;
            width: 90%;
            max-width: 1200px;
            margin: 20px auto;
        }

        .sidebar-left {
            width: 20%;
            padding: 20px;
            background-color: #e0e0e0;
            margin-right: 20px;
            box-sizing: border-box;
        }

        .main-content {
            flex-grow: 1;
            padding: 20px;
            background-color: #fff;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            box-sizing: border-box;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .sidebar-right {
            width: 20%;
            padding: 20px;
            background-color: #e0e0e0;
            margin-left: 20px;
            box-sizing: border-box;
        }

        h1, h2 {
            color: #337ab7;
            text-align: center;
        }

        .digital-clock {
            font-size: 3em;
            margin-bottom: 20px;
        }

        .controls {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        .timezone-selector {
            margin-bottom: 20px;
        }

        .timezone-list {
            list-style: none;
            padding: 0;
        }

        .timezone-item {
            margin-bottom: 5px;
        }

        .lead-capture {
            background-color: #f0f8ff;
            padding: 20px;
            text-align: center;
            margin-top: 20px;
        }

        input[type="email"] {
            padding: 10px;
            margin-bottom: 10px;
            width: 80%;
            border: 1px solid #ccc;
            box-sizing: border-box;
        }

        button {
            padding: 10px 20px;
            background-color: #337ab7;
            color: white;
            border: none;
            cursor: pointer;
        }

        button:hover {
            background-color: #23527c;
        }

        @media (max-width: 800px) {
            .container {
                flex-direction: column;
                width: 95%;
            }
            .sidebar-left, .sidebar-right {
                width: 100%;
                margin: 10px 0;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="sidebar-left">
            <h2>Anúncios</h2>
            <div class="ad-space">Espaço para anúncio 1</div>
            <div class="ad-space">Espaço para anúncio 2</div>
        </div>

        <div class="main-content">
            <h1>Seu Tempo, Suas Regras: O Relógio Digital Multifuncional Perfeito!</h1>
            <h2>Tenha em uma só página o horário exato, cronômetro preciso, alarmes personalizáveis e informações de fusos horários de todo o mundo. Ideal para quem busca praticidade e organização.</h2>

            <div class="digital-clock" id="realtime-clock"></div>

            <div class="controls">
                <div class="chronometer">
                    <h3>Cronômetro</h3>
                    <div id="chronometer-display">00:00:00.00</div>
                    <button onclick="startChronometer()">Iniciar</button>
                    <button onclick="pauseChronometer()">Pausar</button>
                    <button onclick="resetChronometer()">Zerar</button>
                    <button onclick="lapChronometer()">Lap/Split</button>
                    <ul id="laps"></ul>
                </div>

                <div class="alarm">
                    <h3>Alarme</h3>
                    <div id="alarms-list"></div>
                    <input type="time" id="alarm-time">
                    <input type="text" id="alarm-description" placeholder="Descrição (opcional)">
                    <button onclick="setAlarm()">Definir Alarme</button>
                </div>
            </div>

            <div class="ad-banner">Espaço para banner de anúncio abaixo das funcionalidades</div>
        </div>

        <div class="sidebar-right">
            <h2>Fusos Horários</h2>
            <div class="timezone-selector">
                <select id="timezone-select">
                    <option value="UTC">UTC</option>
                    <option value="" id="local-timezone-option">Meu Local</option>
                    <option value="Europe/London">Londres</option>
                    </select>
                <button onclick="addTimezone()">Adicionar Fuso Horário</button>
            </div>
            <ul class="timezone-list" id="timezone-display"></ul>
        </div>
    </div>

    <div class="lead-capture">
        <h2>Receba dicas de produtividade e novidades!</h2>
        <input type="email" id="lead-email" placeholder="Seu e-mail">
        <button>Cadastrar</button>
    </div>

    <script>
        function updateRealtimeClock() {
            const now = new Date();
            const hours = String(now.getHours()).padStart(2, '0');
            const minutes = String(now.getMinutes()).padStart(2, '0');
            const seconds = String(now.getSeconds()).padStart(2, '0');
            document.getElementById('realtime-clock').textContent = `${hours}:${minutes}:${seconds}`;
        }
        setInterval(updateRealtimeClock, 1000);

        let chronometerInterval;
        let chronometerStartTime;
        let lapStartTime;
        let elapsed = 0;
        const chronometerDisplay = document.getElementById('chronometer-display');
        const lapsList = document.getElementById('laps');

        function formatTime(ms) {
            const minutes = Math.floor(ms / (1000 * 60)).toString().padStart(2, '0');
            const seconds = Math.floor((ms % (1000 * 60)) / 1000).toString().padStart(2, '0');
            const milliseconds = Math.floor((ms % 1000) / 10).toString().padStart(2, '0');
            return `${minutes}:${seconds}.${milliseconds}`;
        }

        function startChronometer() {
            if (!chronometerInterval) {
                chronometerStartTime = Date.now() - elapsed;
                lapStartTime = Date.now();
                chronometerInterval = setInterval(function() {
                    elapsed = Date.now() - chronometerStartTime;
                    chronometerDisplay.textContent = formatTime(elapsed);
                }, 10);
            }
        }

        function pauseChronometer() {
            clearInterval(chronometerInterval);
            chronometerInterval = null;
        }

        function resetChronometer() {
            clearInterval(chronometerInterval);
            chronometerInterval = null;
            elapsed = 0;
            chronometerDisplay.textContent = '00:00:00.00';
            lapsList.innerHTML = '';
        }

        function lapChronometer() {
            if (chronometerInterval) {
                const lapTime = Date.now() - lapStartTime;
                const lapItem = document.createElement('li');
                lapItem.textContent = `Lap: ${formatTime(lapTime)} (Total: ${formatTime(elapsed)})`;
                lapsList.appendChild(lapItem);
                lapStartTime = Date.now();
            }
        }

        const alarmsListDiv = document.getElementById('alarms-list');
        const alarmTimeInput = document.getElementById('alarm-time');
        const alarmDescriptionInput = document.getElementById('alarm-description');
        let alarms = [];

        function displayAlarms() {
            alarmsListDiv.innerHTML = '';
            alarms.forEach((alarm, index) => {
                const alarmDiv = document.createElement('div');
                alarmDiv.innerHTML = `<span>${alarm.time}</span> - <span>${alarm.description || 'Alarme'}</span> <button onclick="toggleAlarm(${index})">${alarm.active ? 'Desativar' : 'Ativar'}</button> <button onclick="deleteAlarm(${index})">Excluir</button>`;
                alarmsListDiv.appendChild(alarmDiv);
            });
        }

        function setAlarm() {
            const time = alarmTimeInput.value;
            const description = alarmDescriptionInput.value;
            if (time) {
                alarms.push({ time: time, description: description, active: true });
                displayAlarms();
                alarmTimeInput.value = '';
                alarmDescriptionInput.value = '';
            }
        }

        function toggleAlarm(index) {
            alarms[index].active = !alarms[index].active;
            displayAlarms();
        }

        function deleteAlarm(index) {
            alarms.splice(index, 1);
            displayAlarms();
        }

        setInterval(() => {
            const now = new Date();
            const currentTime = `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;
            alarms.forEach(alarm => {
                if (alarm.active && alarm.time === currentTime) {
                    alert(`Alarme: ${alarm.description || 'Despertar!'}`);
                    alarm.active = false; // Desativa o alarme após disparar
                    displayAlarms();
                }
            });
        }, 1000);

        const timezoneSelect = document.getElementById('timezone-select');
        const timezoneDisplay = document.getElementById('timezone-display');
        let timezones = ['UTC', Intl.DateTimeFormat().resolvedOptions().timeZone, 'Europe/London'];

        function displayTimezones() {
            timezoneDisplay.innerHTML = '';
            timezones.forEach(tz => {
                const now = new Date();
                const options = { timeZone: tz, hour: '2-digit', minute: '2-digit', second: '2-digit', day: 'numeric', month: 'short', year: 'numeric', timeZoneName: 'short' };
                const formatter = new Intl.DateTimeFormat('pt-BR', options);
                const formattedTime = formatter.format(now);
                const listItem = document.createElement('li');
                listItem.classList.add('timezone-item');
                listItem.textContent = `${tz}: ${formattedTime} <button onclick="removeTimezone('${tz}')">Remover</button>`;
                timezoneDisplay.appendChild(listItem);
            });
        }

        function addTimezone() {
            const selectedTimezone = timezoneSelect.value;
            if (selectedTimezone && !timezones.includes(selectedTimezone)) {
                timezones.push(selectedTimezone);
                displayTimezones();
            }
        }

        function removeTimezone(tzToRemove) {
            timezones = timezones.filter(tz => tz !== tzToRemove);
            displayTimezones();
        }

        // Inicialização dos fusos horários
        const localTimezoneOption = document.getElementById('local-timezone-option');
        localTimezoneOption.value = Intl.DateTimeFormat().resolvedOptions().timeZone;
        localTimezoneOption.textContent = `Meu Local (${Intl.DateTimeFormat().resolvedOptions().timeZone})`;
        displayTimezones();
    </script>
</body>
</html>
